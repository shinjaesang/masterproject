<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="inventoryMapper">

    <!-- 상품별 현재 재고 목록 조회 -->
    <select id="selectCurrentInventoryList" resultType="org.myweb.first.inventory.model.dto.Inventory">
        SELECT
            p.product_id AS productId,
            p.product_name AS productName,
            p.product_type AS productType,
            pt.partner_name AS partnerName,
            p.partner_id AS partnerId,
            p.option_value AS optionValue,
            NULL AS imagePath, -- 이미지 경로는 별도 처리(필요시 BLOB 변환)
            NVL((SELECT ws.stock FROM TB_WAREHOUSE_STOCK ws WHERE ws.product_id = p.product_id AND ws.warehouse_id = 'WH001'), 0) AS headOfficeStock,
            NVL((SELECT ws.stock FROM TB_WAREHOUSE_STOCK ws WHERE ws.product_id = p.product_id AND ws.warehouse_id = 'WH004'), 0) AS busanStock,
            NVL((SELECT ws.stock FROM TB_WAREHOUSE_STOCK ws WHERE ws.product_id = p.product_id AND ws.warehouse_id = 'WH005'), 0) AS incheonStock,
            NVL((SELECT ws.stock FROM TB_WAREHOUSE_STOCK ws WHERE ws.product_id = p.product_id AND ws.warehouse_id = 'WH006'), 0) AS daeguStock,
            NVL((SELECT ws.stock FROM TB_WAREHOUSE_STOCK ws WHERE ws.product_id = p.product_id AND ws.warehouse_id = 'WH007'), 0) AS gwangjuStock,
            NVL((SELECT ws.stock FROM TB_WAREHOUSE_STOCK ws WHERE ws.product_id = p.product_id AND ws.warehouse_id = 'WH002'), 0) AS transitStock,
            NVL((SELECT ws.stock FROM TB_WAREHOUSE_STOCK ws WHERE ws.product_id = p.product_id AND ws.warehouse_id = 'WH003'), 0) AS defectiveStock,
            (
                NVL((SELECT ws.stock FROM TB_WAREHOUSE_STOCK ws WHERE ws.product_id = p.product_id AND ws.warehouse_id = 'WH001'), 0) +
                NVL((SELECT ws.stock FROM TB_WAREHOUSE_STOCK ws WHERE ws.product_id = p.product_id AND ws.warehouse_id = 'WH004'), 0) +
                NVL((SELECT ws.stock FROM TB_WAREHOUSE_STOCK ws WHERE ws.product_id = p.product_id AND ws.warehouse_id = 'WH005'), 0) +
                NVL((SELECT ws.stock FROM TB_WAREHOUSE_STOCK ws WHERE ws.product_id = p.product_id AND ws.warehouse_id = 'WH006'), 0) +
                NVL((SELECT ws.stock FROM TB_WAREHOUSE_STOCK ws WHERE ws.product_id = p.product_id AND ws.warehouse_id = 'WH007'), 0) +
                NVL((SELECT ws.stock FROM TB_WAREHOUSE_STOCK ws WHERE ws.product_id = p.product_id AND ws.warehouse_id = 'WH002'), 0) +
                NVL((SELECT ws.stock FROM TB_WAREHOUSE_STOCK ws WHERE ws.product_id = p.product_id AND ws.warehouse_id = 'WH003'), 0)
            ) AS totalStock,
            (
                NVL((SELECT ws.stock FROM TB_WAREHOUSE_STOCK ws WHERE ws.product_id = p.product_id AND ws.warehouse_id = 'WH001'), 0) +
                NVL((SELECT ws.stock FROM TB_WAREHOUSE_STOCK ws WHERE ws.product_id = p.product_id AND ws.warehouse_id = 'WH004'), 0) +
                NVL((SELECT ws.stock FROM TB_WAREHOUSE_STOCK ws WHERE ws.product_id = p.product_id AND ws.warehouse_id = 'WH005'), 0) +
                NVL((SELECT ws.stock FROM TB_WAREHOUSE_STOCK ws WHERE ws.product_id = p.product_id AND ws.warehouse_id = 'WH006'), 0) +
                NVL((SELECT ws.stock FROM TB_WAREHOUSE_STOCK ws WHERE ws.product_id = p.product_id AND ws.warehouse_id = 'WH007'), 0)
            ) AS availableStock,
            p.safe_stock AS safeStock,
            p.cost_price AS costPrice,
            p.selling_price AS sellingPrice
        FROM TB_PRODUCT p
        LEFT JOIN TB_PARTNER pt ON p.partner_id = pt.partner_id
        ORDER BY p.product_id
    </select>

    <!-- 검색 조건에 따른 재고 목록 조회 -->
    <select id="searchInventory" parameterType="org.myweb.first.inventory.model.dto.InventorySearchCondition" resultType="org.myweb.first.inventory.model.dto.Inventory">
        SELECT * FROM (
            SELECT inner_table.*, ROWNUM rnum FROM (
                SELECT
                    p.product_id AS productId,
                    p.product_name AS productName,
                    p.product_type AS productType,
                    pt.partner_name AS partnerName,
                    p.partner_id AS partnerId,
                    p.option_value AS optionValue,
                    NULL AS imagePath,
                    NVL((SELECT ws.stock FROM TB_WAREHOUSE_STOCK ws WHERE ws.product_id = p.product_id AND ws.warehouse_id = 'WH001'), 0) AS headOfficeStock,
                    NVL((SELECT ws.stock FROM TB_WAREHOUSE_STOCK ws WHERE ws.product_id = p.product_id AND ws.warehouse_id = 'WH004'), 0) AS busanStock,
                    NVL((SELECT ws.stock FROM TB_WAREHOUSE_STOCK ws WHERE ws.product_id = p.product_id AND ws.warehouse_id = 'WH005'), 0) AS incheonStock,
                    NVL((SELECT ws.stock FROM TB_WAREHOUSE_STOCK ws WHERE ws.product_id = p.product_id AND ws.warehouse_id = 'WH006'), 0) AS daeguStock,
                    NVL((SELECT ws.stock FROM TB_WAREHOUSE_STOCK ws WHERE ws.product_id = p.product_id AND ws.warehouse_id = 'WH007'), 0) AS gwangjuStock,
                    NVL((SELECT ws.stock FROM TB_WAREHOUSE_STOCK ws WHERE ws.product_id = p.product_id AND ws.warehouse_id = 'WH002'), 0) AS transitStock,
                    NVL((SELECT ws.stock FROM TB_WAREHOUSE_STOCK ws WHERE ws.product_id = p.product_id AND ws.warehouse_id = 'WH003'), 0) AS defectiveStock,
                    (
                        NVL((SELECT ws.stock FROM TB_WAREHOUSE_STOCK ws WHERE ws.product_id = p.product_id AND ws.warehouse_id = 'WH001'), 0) +
                        NVL((SELECT ws.stock FROM TB_WAREHOUSE_STOCK ws WHERE ws.product_id = p.product_id AND ws.warehouse_id = 'WH004'), 0) +
                        NVL((SELECT ws.stock FROM TB_WAREHOUSE_STOCK ws WHERE ws.product_id = p.product_id AND ws.warehouse_id = 'WH005'), 0) +
                        NVL((SELECT ws.stock FROM TB_WAREHOUSE_STOCK ws WHERE ws.product_id = p.product_id AND ws.warehouse_id = 'WH006'), 0) +
                        NVL((SELECT ws.stock FROM TB_WAREHOUSE_STOCK ws WHERE ws.product_id = p.product_id AND ws.warehouse_id = 'WH007'), 0) +
                        NVL((SELECT ws.stock FROM TB_WAREHOUSE_STOCK ws WHERE ws.product_id = p.product_id AND ws.warehouse_id = 'WH002'), 0) +
                        NVL((SELECT ws.stock FROM TB_WAREHOUSE_STOCK ws WHERE ws.product_id = p.product_id AND ws.warehouse_id = 'WH003'), 0)
                    ) AS totalStock,
                    (
                        NVL((SELECT ws.stock FROM TB_WAREHOUSE_STOCK ws WHERE ws.product_id = p.product_id AND ws.warehouse_id = 'WH001'), 0) +
                        NVL((SELECT ws.stock FROM TB_WAREHOUSE_STOCK ws WHERE ws.product_id = p.product_id AND ws.warehouse_id = 'WH004'), 0) +
                        NVL((SELECT ws.stock FROM TB_WAREHOUSE_STOCK ws WHERE ws.product_id = p.product_id AND ws.warehouse_id = 'WH005'), 0) +
                        NVL((SELECT ws.stock FROM TB_WAREHOUSE_STOCK ws WHERE ws.product_id = p.product_id AND ws.warehouse_id = 'WH006'), 0) +
                        NVL((SELECT ws.stock FROM TB_WAREHOUSE_STOCK ws WHERE ws.product_id = p.product_id AND ws.warehouse_id = 'WH007'), 0)
                    ) AS availableStock,
                    p.safe_stock AS safeStock,
                    p.cost_price AS costPrice,
                    p.selling_price AS sellingPrice
                FROM TB_PRODUCT p
                LEFT JOIN TB_PARTNER pt ON p.partner_id = pt.partner_id
                <where>
                    <if test="productName != null and productName != ''">
                        AND p.product_name LIKE '%' || #{productName} || '%'
                    </if>
                    <if test="productCode != null and productCode != ''">
                        AND p.product_id LIKE '%' || #{productCode} || '%'
                    </if>
                    <if test="productType != null and productType != ''">
                        AND p.product_type = #{productType}
                    </if>
                    <if test="partnerId != null and partnerId != ''">
                        AND p.partner_id = #{partnerId}
                    </if>
                    <if test="inventoryStatus == 'NORMAL'">
                        AND (
                            NVL((SELECT ws.stock FROM TB_WAREHOUSE_STOCK ws WHERE ws.product_id = p.product_id AND ws.warehouse_id = 'WH001'), 0) +
                            NVL((SELECT ws.stock FROM TB_WAREHOUSE_STOCK ws WHERE ws.product_id = p.product_id AND ws.warehouse_id = 'WH004'), 0) +
                            NVL((SELECT ws.stock FROM TB_WAREHOUSE_STOCK ws WHERE ws.product_id = p.product_id AND ws.warehouse_id = 'WH005'), 0) +
                            NVL((SELECT ws.stock FROM TB_WAREHOUSE_STOCK ws WHERE ws.product_id = p.product_id AND ws.warehouse_id = 'WH006'), 0) +
                            NVL((SELECT ws.stock FROM TB_WAREHOUSE_STOCK ws WHERE ws.product_id = p.product_id AND ws.warehouse_id = 'WH007'), 0)
                        ) >= p.safe_stock
                    </if>
                    <if test="inventoryStatus == 'LOW'">
                        AND (
                            NVL((SELECT ws.stock FROM TB_WAREHOUSE_STOCK ws WHERE ws.product_id = p.product_id AND ws.warehouse_id = 'WH001'), 0) +
                            NVL((SELECT ws.stock FROM TB_WAREHOUSE_STOCK ws WHERE ws.product_id = p.product_id AND ws.warehouse_id = 'WH004'), 0) +
                            NVL((SELECT ws.stock FROM TB_WAREHOUSE_STOCK ws WHERE ws.product_id = p.product_id AND ws.warehouse_id = 'WH005'), 0) +
                            NVL((SELECT ws.stock FROM TB_WAREHOUSE_STOCK ws WHERE ws.product_id = p.product_id AND ws.warehouse_id = 'WH006'), 0) +
                            NVL((SELECT ws.stock FROM TB_WAREHOUSE_STOCK ws WHERE ws.product_id = p.product_id AND ws.warehouse_id = 'WH007'), 0)
                        ) &lt; p.safe_stock
                        AND (
                            NVL((SELECT ws.stock FROM TB_WAREHOUSE_STOCK ws WHERE ws.product_id = p.product_id AND ws.warehouse_id = 'WH001'), 0) +
                            NVL((SELECT ws.stock FROM TB_WAREHOUSE_STOCK ws WHERE ws.product_id = p.product_id AND ws.warehouse_id = 'WH004'), 0) +
                            NVL((SELECT ws.stock FROM TB_WAREHOUSE_STOCK ws WHERE ws.product_id = p.product_id AND ws.warehouse_id = 'WH005'), 0) +
                            NVL((SELECT ws.stock FROM TB_WAREHOUSE_STOCK ws WHERE ws.product_id = p.product_id AND ws.warehouse_id = 'WH006'), 0) +
                            NVL((SELECT ws.stock FROM TB_WAREHOUSE_STOCK ws WHERE ws.product_id = p.product_id AND ws.warehouse_id = 'WH007'), 0)
                        ) &gt; 0
                    </if>
                    <if test="inventoryStatus == 'ZERO'">
                        AND (
                            NVL((SELECT ws.stock FROM TB_WAREHOUSE_STOCK ws WHERE ws.product_id = p.product_id AND ws.warehouse_id = 'WH001'), 0) +
                            NVL((SELECT ws.stock FROM TB_WAREHOUSE_STOCK ws WHERE ws.product_id = p.product_id AND ws.warehouse_id = 'WH004'), 0) +
                            NVL((SELECT ws.stock FROM TB_WAREHOUSE_STOCK ws WHERE ws.product_id = p.product_id AND ws.warehouse_id = 'WH005'), 0) +
                            NVL((SELECT ws.stock FROM TB_WAREHOUSE_STOCK ws WHERE ws.product_id = p.product_id AND ws.warehouse_id = 'WH006'), 0) +
                            NVL((SELECT ws.stock FROM TB_WAREHOUSE_STOCK ws WHERE ws.product_id = p.product_id AND ws.warehouse_id = 'WH007'), 0)
                        ) = 0
                    </if>
                </where>
                <choose>
                    <when test="sortOrder == 'productId'">ORDER BY p.product_id</when>
                    <when test="sortOrder == 'productName'">ORDER BY p.product_name</when>
                    <when test="sortOrder == 'partnerName'">ORDER BY pt.partner_name</when>
                    <when test="sortOrder == 'productType'">ORDER BY p.product_type</when>
                    <when test="sortOrder == 'totalStock'">ORDER BY totalStock DESC</when>
                    <when test="sortOrder == 'availableStock'">ORDER BY availableStock DESC</when>
                    <when test="sortOrder == 'headOfficeStock'">ORDER BY headOfficeStock DESC</when>
                    <when test="sortOrder == 'busanStock'">ORDER BY busanStock DESC</when>
                    <when test="sortOrder == 'incheonStock'">ORDER BY incheonStock DESC</when>
                    <when test="sortOrder == 'daeguStock'">ORDER BY daeguStock DESC</when>
                    <when test="sortOrder == 'gwangjuStock'">ORDER BY gwangjuStock DESC</when>
                    <when test="sortOrder == 'transitStock'">ORDER BY transitStock DESC</when>
                    <when test="sortOrder == 'defectiveStock'">ORDER BY defectiveStock DESC</when>
                    <otherwise>ORDER BY p.product_id</otherwise>
                </choose>
            ) inner_table
            WHERE ROWNUM &lt;= #{endRow}
        )
        WHERE rnum &gt; #{startRow}
    </select>

    <select id="countInventory" parameterType="org.myweb.first.inventory.model.dto.InventorySearchCondition" resultType="int">
        SELECT COUNT(*)
        FROM TB_PRODUCT p
        LEFT JOIN TB_PARTNER pt ON p.partner_id = pt.partner_id
        <where>
            <if test="productName != null and productName != ''">
                AND p.product_name LIKE '%' || #{productName} || '%'
            </if>
            <if test="productCode != null and productCode != ''">
                AND p.product_id LIKE '%' || #{productCode} || '%'
            </if>
            <if test="productType != null and productType != ''">
                AND p.product_type = #{productType}
            </if>
            <if test="partnerId != null and partnerId != ''">
                AND p.partner_id = #{partnerId}
            </if>
        </where>
    </select>

    <select id="selectStock" parameterType="map" resultType="org.myweb.first.inventory.model.dto.WarehouseStock">
        SELECT 
            warehouse_id as warehouseId,
            product_id as productId,
            stock as stockQuantity
        FROM TB_WAREHOUSE_STOCK
        WHERE warehouse_id = #{warehouseId}
        AND product_id = #{productId}
    </select>

    <insert id="insertStock" parameterType="org.myweb.first.inventory.model.dto.WarehouseStock">
        INSERT INTO TB_WAREHOUSE_STOCK (
            warehouse_id,
            product_id,
            stock
        ) VALUES (
            #{warehouseId},
            #{productId},
            #{stockQuantity}
        )
    </insert>

    <update id="updateStock" parameterType="org.myweb.first.inventory.model.dto.WarehouseStock">
        UPDATE TB_WAREHOUSE_STOCK
        SET 
            stock = #{stockQuantity}
        WHERE warehouse_id = #{warehouseId}
        AND product_id = #{productId}
    </update>

    <insert id="insertStockHistory" parameterType="map">
        INSERT INTO TB_STOCK_HISTORY (
            stock_history_id,
            in_warehouse_id,
            out_warehouse_id,
            product_id,
            in_stock_quantity,
            out_stock_quantity,
            change_quantity,
            change_type,
            change_date,
            inoutvoice_id,
            inoutvoice_product_id,
            created_by
        ) VALUES (
            'HIS' || LPAD(seq_stock_history.NEXTVAL, 5, '0'),
            #{inWarehouseId},
            #{outWarehouseId},
            #{productId},
            #{inStockQuantity},
            #{outStockQuantity},
            #{changeQuantity},
            #{changeType},
            SYSDATE,
            #{inoutvoiceId},
            #{inoutvoiceProductId},
            #{createdBy}
        )
    </insert>

    <!-- 일자별 재고 조회 -->
    <select id="searchDailyInventory" parameterType="org.myweb.first.inventory.model.dto.DailyInventorySearchCondition" resultType="org.myweb.first.inventory.model.dto.DailyInventory">
        <![CDATA[
        WITH daily_data AS (
            SELECT
                TO_CHAR(sh.change_date, 'YYYY-MM-DD') AS change_date,
                p.partner_name,
                sh.product_id,
                pd.product_name,
                pd.product_type,
                pd.category,
                SUM(CASE WHEN sh.change_type = '입고' THEN sh.change_quantity ELSE 0 END) AS inbound,
                SUM(CASE WHEN sh.change_type = '출고' THEN sh.change_quantity ELSE 0 END) AS outbound,
                SUM(CASE WHEN sh.change_type = '입고' THEN sh.change_quantity
                   WHEN sh.change_type = '출고' THEN -sh.change_quantity
                   ELSE 0 END) AS stock_change
            FROM TB_STOCK_HISTORY sh
            JOIN TB_PRODUCT pd ON sh.product_id = pd.product_id
            JOIN TB_PARTNER p ON pd.partner_id = p.partner_id
            WHERE 1=1
        ]]>
                <if test="startDate != null and startDate != ''">AND sh.change_date >= TO_DATE(#{startDate}, 'YYYY-MM-DD')</if>
                <if test="endDate != null and endDate != ''">AND sh.change_date &lt;= TO_DATE(#{endDate}, 'YYYY-MM-DD') + 0.99999</if>
                <if test="inventoryType != null and inventoryType != ''">
                    <choose>
                        <when test="inventoryType == 'NORMAL'">AND (sh.in_warehouse_id IN ('WH001', 'WH004', 'WH005', 'WH006', 'WH007') OR sh.out_warehouse_id IN ('WH001', 'WH004', 'WH005', 'WH006', 'WH007'))</when>
                        <when test="inventoryType == 'DEFECTIVE'">AND (sh.in_warehouse_id = 'WH003' OR sh.out_warehouse_id = 'WH003')</when>
                        <when test="inventoryType == 'TRANSIT'">AND (sh.in_warehouse_id = 'WH002' OR sh.out_warehouse_id = 'WH002')</when>
                    </choose>
                </if>
                <if test="vendor != null and vendor != ''">AND EXISTS (SELECT 1 FROM TB_ORDERS o JOIN TB_ORDER_ITEMS oi ON o.order_id = oi.order_id WHERE o.partner_id = #{vendor} AND oi.product_id = sh.product_id AND o.order_type = '수주')</if>
                <if test="supplier != null and supplier != ''">AND p.partner_id = #{supplier}</if>
                <if test="workType != null and workType != ''">
                    <choose>
                        <when test="workType == 'INBOUND'">AND sh.change_type = '입고'</when>
                        <when test="workType == 'OUTBOUND'">AND sh.change_type = '출고'</when>
                    </choose>
                </if>
                <if test="productType != null and productType != ''">AND pd.product_type = #{productType}</if>
                <if test="category != null and category != ''">AND pd.category = #{category}</if>
                <if test="productName != null and productName != ''">AND pd.product_name LIKE '%' || #{productName} || '%'</if>
                <if test="productCode != null and productCode != ''">AND sh.product_id LIKE '%' || #{productCode} || '%'</if>
                <if test="productPeriodType != null and productPeriodType != '' and productStartDate != null and productStartDate != ''">
                    <choose>
                        <when test="productPeriodType == 'REGISTER'">
                            AND pd.created_at >= TO_DATE(#{productStartDate}, 'YYYY-MM-DD')
                            <if test="productEndDate != null and productEndDate != ''">AND pd.created_at &lt;= TO_DATE(#{productEndDate}, 'YYYY-MM-DD') + 0.99999</if>
                        </when>
                        <when test="productPeriodType == 'INBOUND'">
                            AND EXISTS (SELECT 1 FROM TB_INOUTVOICE_PRODUCT ip JOIN TB_INOUTVOICE i ON ip.inoutvoice_id = i.inoutvoice_id WHERE ip.product_id = sh.product_id AND i.inoutvoice_type = '입고' AND i.created_at >= TO_DATE(#{productStartDate}, 'YYYY-MM-DD')
                            <if test="productEndDate != null and productEndDate != ''">AND i.created_at &lt;= TO_DATE(#{productEndDate}, 'YYYY-MM-DD') + 0.99999</if>)
                        </when>
                    </choose>
                </if>
                GROUP BY TO_CHAR(sh.change_date, 'YYYY-MM-DD'), p.partner_name, sh.product_id, pd.product_name, pd.product_type, pd.category
        <![CDATA[
        ),
        date_headers AS (
            SELECT TO_CHAR(dt, 'YYYY-MM-DD') AS date_str
            FROM (
                SELECT 
        ]]>
                    <choose>
                        <when test="startDate != null and startDate != ''">
                            TO_DATE(#{startDate}, 'YYYY-MM-DD')
                        </when>
                        <otherwise>
                            TRUNC(SYSDATE - 7)
                        </otherwise>
                    </choose>
        <![CDATA[
                    + LEVEL - 1 AS dt
                FROM DUAL
                CONNECT BY LEVEL <=
        ]]>
                    <choose>
                        <when test="startDate != null and startDate != '' and endDate != null and endDate != ''">
                            TO_DATE(#{endDate}, 'YYYY-MM-DD') - TO_DATE(#{startDate}, 'YYYY-MM-DD') + 1
                        </when>
                        <otherwise>
                            8
                        </otherwise>
                    </choose>
        <![CDATA[
            )
            ORDER BY dt
        ),
        product_list AS (
            SELECT DISTINCT partner_name, product_id, product_name, product_type, category
            FROM daily_data
        ),
        product_summary AS (
            SELECT 
                p.partner_name AS supplier,
                p.product_id AS productcode,
                p.product_name AS productname,
                p.product_type AS producttype,
                p.category,
                SUM(d.inbound) AS periodinbound,
                SUM(d.outbound) AS periodoutbound,
                SUM(d.stock_change) AS periodstock
            FROM product_list p
            LEFT JOIN daily_data d ON p.partner_name = d.partner_name AND p.product_id = d.product_id
            GROUP BY p.partner_name, p.product_id, p.product_name, p.product_type, p.category
        ),
        daily_matrix AS (
            SELECT
                p.partner_name,
                p.product_id,
                p.product_name,
                p.product_type,
                p.category,
                dh.date_str,
                NVL(MAX(CASE WHEN d.change_date = dh.date_str THEN d.stock_change ELSE NULL END), 0) AS daily_qty
            FROM product_list p
            CROSS JOIN date_headers dh
            LEFT JOIN daily_data d ON p.partner_name = d.partner_name 
                                  AND p.product_id = d.product_id 
                                  AND dh.date_str = d.change_date
            GROUP BY p.partner_name, p.product_id, p.product_name, p.product_type, p.category, dh.date_str
            ORDER BY p.partner_name, p.product_id, dh.date_str
        ),
        daily_values AS (
            SELECT
                dm.partner_name,
                dm.product_id,
                dm.product_name,
                dm.product_type,
                dm.category,
                LISTAGG(dm.daily_qty, ',') WITHIN GROUP (ORDER BY dm.date_str) AS daily_quantities
            FROM daily_matrix dm
            GROUP BY dm.partner_name, dm.product_id, dm.product_name, dm.product_type, dm.category
        ),
        final_data AS (
            SELECT
                ps.supplier,
                ps.productcode AS productCode,
                ps.productname AS productName,
                ps.producttype AS productType,
                ps.category,
                ps.periodinbound AS periodInbound,
                ps.periodoutbound AS periodOutbound,
                ps.periodstock AS periodStock,
                dv.daily_quantities AS dailyQuantities
            FROM product_summary ps
            JOIN daily_values dv ON ps.supplier = dv.partner_name AND ps.productcode = dv.product_id
        )
        SELECT * FROM (
            SELECT ROWNUM AS rn, 'Group' AS "date", fd.* 
            FROM final_data fd
            WHERE ROWNUM <= #{endRow}
        ) WHERE rn > #{startRow}
        ]]>
    </select>
    
    <!-- 일자별 재고 개수 조회 -->
    <select id="countDailyInventory" parameterType="org.myweb.first.inventory.model.dto.DailyInventorySearchCondition" resultType="int">
        <![CDATA[
        SELECT COUNT(*) FROM (
            SELECT 
                TO_CHAR(sh.change_date, 'YYYY-MM-DD') AS "date",
                p.partner_name AS supplier, 
                sh.product_id AS productCode,
                pd.product_name AS productName,
                pd.product_type AS productType,
                pd.category
            FROM TB_STOCK_HISTORY sh
            JOIN TB_PRODUCT pd ON sh.product_id = pd.product_id
            JOIN TB_PARTNER p ON pd.partner_id = p.partner_id
            WHERE 1=1
        ]]>
            <if test="startDate != null and startDate != ''">AND sh.change_date >= TO_DATE(#{startDate}, 'YYYY-MM-DD')</if>
            <if test="endDate != null and endDate != ''">AND sh.change_date &lt;= TO_DATE(#{endDate}, 'YYYY-MM-DD') + 0.99999</if>
            <if test="inventoryType != null and inventoryType != ''">
                <choose>
                    <when test="inventoryType == 'NORMAL'">AND (sh.in_warehouse_id IN ('WH001', 'WH004', 'WH005', 'WH006', 'WH007') OR sh.out_warehouse_id IN ('WH001', 'WH004', 'WH005', 'WH006', 'WH007'))</when>
                    <when test="inventoryType == 'DEFECTIVE'">AND (sh.in_warehouse_id = 'WH003' OR sh.out_warehouse_id = 'WH003')</when>
                    <when test="inventoryType == 'TRANSIT'">AND (sh.in_warehouse_id = 'WH002' OR sh.out_warehouse_id = 'WH002')</when>
                </choose>
            </if>
            <if test="vendor != null and vendor != ''">AND EXISTS (SELECT 1 FROM TB_ORDERS o JOIN TB_ORDER_ITEMS oi ON o.order_id = oi.order_id WHERE o.partner_id = #{vendor} AND oi.product_id = sh.product_id AND o.order_type = '수주')</if>
            <if test="supplier != null and supplier != ''">AND p.partner_id = #{supplier}</if>
            <if test="workType != null and workType != ''">
                <choose>
                    <when test="workType == 'INBOUND'">AND sh.change_type = '입고'</when>
                    <when test="workType == 'OUTBOUND'">AND sh.change_type = '출고'</when>
                </choose>
            </if>
            <if test="productType != null and productType != ''">AND pd.product_type = #{productType}</if>
            <if test="category != null and category != ''">AND pd.category = #{category}</if>
            <if test="productName != null and productName != ''">AND pd.product_name LIKE '%' || #{productName} || '%'</if>
            <if test="productCode != null and productCode != ''">AND sh.product_id LIKE '%' || #{productCode} || '%'</if>
            <if test="productPeriodType != null and productPeriodType != '' and productStartDate != null and productStartDate != ''">
                <choose>
                    <when test="productPeriodType == 'REGISTER'">
                        AND pd.created_at >= TO_DATE(#{productStartDate}, 'YYYY-MM-DD')
                        <if test="productEndDate != null and productEndDate != ''">AND pd.created_at &lt;= TO_DATE(#{productEndDate}, 'YYYY-MM-DD') + 0.99999</if>
                    </when>
                    <when test="productPeriodType == 'INBOUND'">
                        AND EXISTS (SELECT 1 FROM TB_INOUTVOICE_PRODUCT ip JOIN TB_INOUTVOICE i ON ip.inoutvoice_id = i.inoutvoice_id WHERE ip.product_id = sh.product_id AND i.inoutvoice_type = '입고' AND i.created_at >= TO_DATE(#{productStartDate}, 'YYYY-MM-DD')
                        <if test="productEndDate != null and productEndDate != ''">AND i.created_at &lt;= TO_DATE(#{productEndDate}, 'YYYY-MM-DD') + 0.99999</if>)
                    </when>
                </choose>
            </if>
            GROUP BY TO_CHAR(sh.change_date, 'YYYY-MM-DD'), p.partner_name, sh.product_id, pd.product_name, pd.product_type, pd.category
        )
    </select>
    
    <!-- 일자별 재고 조회 헤더 (날짜 목록) 조회 -->
    <select id="selectDateHeaders" parameterType="org.myweb.first.inventory.model.dto.DailyInventorySearchCondition" resultType="string">
        <![CDATA[
        SELECT TO_CHAR(dt, 'YYYY-MM-DD') AS date_str
        FROM (
            SELECT 
        ]]>
                <choose>
                    <when test="startDate != null and startDate != ''">
                        TO_DATE(#{startDate}, 'YYYY-MM-DD')
                    </when>
                    <otherwise>
                        TRUNC(SYSDATE - 7)
                    </otherwise>
                </choose>
        <![CDATA[
                + LEVEL - 1 AS dt
            FROM DUAL
            CONNECT BY LEVEL <=
        ]]>
                <choose>
                    <when test="startDate != null and startDate != '' and endDate != null and endDate != ''">
                        TO_DATE(#{endDate}, 'YYYY-MM-DD') - TO_DATE(#{startDate}, 'YYYY-MM-DD') + 1
                    </when>
                    <otherwise>
                        8
                    </otherwise>
                </choose>
        <![CDATA[
        )
        ORDER BY dt
        ]]>
    </select>

</mapper> 